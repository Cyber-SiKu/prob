apply plugin: 'base'

/*	--!		 Please Define the Parent ID and and the Group Id! 		--!	*/

groupID		=	"de.prob"
parentID	= 	"de.prob.parent"



//---     Defining Tycho POM parts			--//


    def artifact(artifactId,versionNumber) { """
		<groupId>${groupId()}</groupId>
		<artifactId>${artifactId}</artifactId>
		<version>${versionNumber}</version>
		<packaging>eclipse-plugin</packaging>
	""" }
	
	
			
	def start() { """<?xml version="1.0" encoding="UTF-8"?>
	<project
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<modelVersion>4.0.0</modelVersion>
	"""}
	
	
	def elder() {"""
		<parent>
			<groupId>${groupId()}</groupId>
			<artifactId>${parentId()}</artifactId>
			<version>1.0.0.qualifier</version>
			<relativePath>../${parentId()}/pom.xml</relativePath>
		</parent>
	"""}

	def repos() {"""
		  <repositories>
    	<!-- configure p2 repository to resolve against -->
    	<repository>
    	  <id>prob_target</id>
    	  <layout>p2</layout>
    	  <url>http://cobra.cs.uni-duesseldorf.de/prob_dev_target/</url>
    	</repository>
    
    	<repository>
    	  	<id>indigo</id>
    	  	<layout>p2</layout>
      		<url>http://download.eclipse.org/releases/indigo/</url>
    	</repository>
  	</repositories> 
	"""}
	


	def end() {"""
	</project>
	"""}



def download(address,target) {
	    def file = new FileOutputStream(target)
	    def out = new BufferedOutputStream(file)
	    out << new URL(address).openStream()
	    out.close()
}

def projects(int i){
	return  subprojects.name[i]
}
//	returns the name of a subproject listed in the settings.gradle file


def numberOfProjects(){
	return subprojects.name.size()
}
//	returns the number of projects listed in the settings.gradle file


task downloadCli << {
		dir = 'de.prob.core/prob/'
		delete file(dir)
	    new File(dir).mkdirs() 
	
		['leopard':'macos','linux':'linux','linux64':'linux64','win32':'windows'].each {
		n = it.getKey()
	
		targetdir = dir+it.getValue()
		targetzip = dir+"probcli_${n}.zip"
		url = "http://nightly.cobra.cs.uni-duesseldorf.de/cli/probcli_${n}.zip"
		download(url,targetzip)
	    FileTree zip = zipTree(targetzip)
	    copy {
		   from zip
		   into targetdir
	    }
		delete file(targetzip)
	}
	
}


/* 		--		Define ParentId			--		*/

def parentId(){
	return parentID
}
/*
*	This is the project of the parent Pom
*	The Tycho Maven Build is triggered from
*	this project's pom
*/



/*	--			Define Group Id			--		*/
def groupId(){
	return groupID
}

/*
*	This Group ID will be used in every sub project
*/

subprojects {
	
	apply plugin: 'base'
		
	task deploy(){
		description = "\tGenerating the Tycho Poms. Please remember to add a '.qualifier' to the version numbers!"

		versionNumber = 'Version Number Error:\tcheck Manifest for Bundle-Version Number and make sure to add a ".qualifier" to the version numbers!\n'
		
		artifactId = 'Could not find Bundle-SymbolicName in Manifest.file'

		
		/* -- In case of changed Manifest File in Eclipse:
		*	
		*	Version Numbers of the projects are collected via 
		*	regular expressions in the Manifest.MF File.  
		*	Versionnumber of the projects are equal to their
		*	Bundle-Version Number
		*/
	}
	
	task deleteArtifacts(type: Delete) {
	  delete 'target','pom.xml'
	}
	
}

task createPoms(dependsOn: subprojects.deploy)

task collectArtifacts(type:Copy) {
	    from 'de.prob.repository/target/repository/'
	    into 'updatesite'
 }		


clean {
	dependsOn += subprojects.deleteArtifacts
}


task install(dependsOn: [createPoms, downloadCli] , type:Exec) {
	description = "\tExecutes a 'mvn install' of the parent pom.xml and auto-generates Tycho Poms"	

	
	commandLine 'mvn', 'install', '-f', 'de.prob.parent/pom.xml'
		
}



//	Build Script can be executed via gradle install
//	Pom Generation can be executed via gradle deploy


